import random

# Define the Tic-Tac-Toe board
board = [" " for _ in range(9)]

# Function to display the Tic-Tac-Toe board
def print_board():
    for i in range(0, 9, 3):
        print(f"{board[i]} | {board[i + 1]} | {board[i + 2]}")
        if i < 6:
            print("-" * 9)


def is_board_full(board):
    return " " not in board

# Function to check if a player has won
def check_winner(board, player):
    winning_combinations = [(0, 1, 2), (3, 4, 5), (6, 7, 8),
                            (0, 3, 6), (1, 4, 7), (2, 5, 8),
                            (0, 4, 8), (2, 4, 6)]

    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] == player:
            return True
    return False

# Function to make a player's move
def make_move(player, position):
    if board[position] == " ":
        board[position] = player
        return True
    else:
        return False

# Minimax algorithm for the AI player
def minimax(board, depth, is_maximizing):
    if check_winner(board, "O"):
        return 1
    elif check_winner(board, "X"):
        return -1
    elif is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -float("inf")
        for i in range(9):
            if board[i] == " ":
                board[i] = "O"
                score = minimax(board, depth + 1, False)
                board[i] = " "
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = float("inf")
        for i in range(9):
            if board[i] == " ":
                board[i] = "X"
                score = minimax(board, depth + 1, True)
                board[i] = " "
                best_score = min(score, best_score)
        return best_score

# Function to find the best move for the AI player
def find_best_move():
    best_score = -float("inf")
    best_move = None
    for i in range(9):
        if board[i] == " ":
            board[i] = "O"
            score = minimax(board, 0, False)
            board[i] = " "
            if score > best_score:
                best_score = score
                best_move = i
    return best_move

# Main game loop
while True:
    print_board()

    # Human player's move
    while True:
        try:
            player_move = int(input("Enter your move (1-9): ")) - 1
            if 0 <= player_move < 9 and board[player_move] == " ":
                make_move("X", player_move)
                break
            else:
                print("Invalid move. Try again.")
        except ValueError:
            print("Invalid input. Enter a number between 1 and 9.")

    # Check if the human player wins
    if check_winner(board, "X"):
        print_board()
        print("Congratulations! You win!")
        break

    # Check if it's a tie
    if is_board_full(board):
        print_board()
        print("It's a tie!")
        break

    # AI player's move
    ai_move = find_best_move()
    make_move("O", ai_move)

    # Check if the AI player wins
    if check_winner(board, "O"):
        print_board()
        print("AI wins! Better luck next time.")
        break
